* web封装， mvc封装
	* 封装请求-响应过程中的一些常用功能。
	
	* 在没有web框架前
	* 每次浏览器请求->服务器->参考web.xml找到与之匹配的servlet(controller)->调用service方法
	* 这就使得n次不同的请求，需要调用n个不同的servlet，不方便维护管理
	* 每次请求在servlet中都会有一些公共的操作
		* 接收参数 ： 普通参数，文件参数，单个参数，多个重复参数
		* 类型处理 ： 数字类型转换
		* 数组组装 ： 将参数组装对象
	* 不同的请求具体的业务不同。
	* 业务处理完成后，需要给与响应
		* 直接响应
		* 间接响应
			* 转发（携带数据） 
			* 重定向
			
	
	* 综上分析，我们对请求响应中的一些功能实现封装
	* 封装后的效果包括以下特点：
		* 多个请求，不再对应多个controller的方法，可以对应一个controller的多个方法。
			* 思考： 如何处理这个映射，让框架实现请求与controller之间的匹配。
		* 由框架负责接收参数
			* 思考： 如何让框架知道需要获得哪个名字的参数呢
			* 思考： 如果传递的是文件参数，框架由如何处理
		* 由框架负责处理参数类型
			* 思考： 如何让框架知道需要将参数转换成哪种类型
			* 思考： 万一要转换的类型框架不会怎么办
		* 由框架负责将参数组成对象
			* 思考： 如何让框架知道需要将参数组成什么类型的对象 (反射)
		* 由框架负责响应
			* 思考： 如何让框架知道用哪种方式响应
			* 思考： 如何让框架知道响应什么
		
		* 由框架实现AOP
			* 功能管理
				* 不同用户会显示不同菜单
				* 不同用户会显示不同按钮
				* 设置功能表
					fid , fname , ftype , fhref , fauth.
			* 思考： 如何告诉框架增加了哪些自定义的切面功能
			* 思考： 如何告诉框架新增加的切面都对哪些请求生效
			* 思考： 框架如何实现AOP
				* 反射
				* 注解
				* 动态代理
					* 基于接口 Proxy
					* 基于父类 cglib
		
		* 使用注解和xml实现配置
			* 复习： sax解析xml
				
			